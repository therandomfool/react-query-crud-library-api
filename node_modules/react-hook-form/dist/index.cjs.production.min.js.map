{"version":3,"file":"index.cjs.production.min.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getNodeParentName.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/isWeb.ts","../src/utils/isProxyEnabled.ts","../src/useFormState.ts","../src/useController.ts","../src/logic/isNameInFieldArray.ts","../src/logic/getControllerValue.ts","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFieldsValues.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/deepMerge.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/getFields.ts","../src/utils/isFileInput.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/logic/getCheckboxValue.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/skipValidation.ts","../src/utils/isFunction.ts","../src/utils/isString.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/utils/getValidationModes.ts","../src/utils/isHTMLElement.ts","../src/utils/Subject.ts","../src/useForm.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/utils/isRadioOrCheckbox.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isUndefined from './isUndefined';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormReturn<TFieldValues> =>\n  (React.useContext(FormContext) as unknown) as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={(omit(props, 'children') as unknown) as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T, K extends ReadFormState>(\n  formState: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) =>\n  isEmptyObject(formState) ||\n  Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n  Object.keys(formState).find(\n    (key) =>\n      readFormStateRef[key as keyof ReadFormState] ===\n      (isRoot ? VALIDATION_MODE.all : true),\n  );\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED &&\n  typeof window.HTMLElement !== UNDEFINED &&\n  typeof document !== UNDEFINED;\n","import { UNDEFINED } from '../constants';\n\nimport isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport default isProxyEnabled;\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport {\n  FieldValues,\n  FormState,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext();\n  const { formStateRef, formStateSubjectRef, readFormStateRef } =\n    (props && props.control) || methods.control;\n\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n\n  React.useEffect(() => {\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next: (formState) => {\n        shouldRenderFormState(formState, readFormState.current) &&\n          updateFormState({\n            ...formStateRef.current,\n            ...formState,\n          });\n      },\n    });\n\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n\n  return getProxyFormState<TFieldValues>(\n    isProxyEnabled,\n    formState as FormState<TFieldValues>,\n    readFormStateRef,\n    readFormState,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport { EVENTS } from './constants';\nimport {\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n}: UseControllerProps<TFieldValues, TName>): UseControllerReturn<\n  TFieldValues,\n  TName\n> {\n  const methods = useFormContext<TFieldValues>();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    fieldArrayNamesRef,\n    controllerSubjectRef,\n  } = control || methods.control;\n\n  const { onChange, onBlur, ref } = register(name, rules);\n  const [value, setInputStateValue] = React.useState(\n    isUndefined(get(fieldsRef.current, name)._f.value) ||\n      isNameInFieldArray(fieldArrayNamesRef.current, name)\n      ? isUndefined(defaultValue)\n        ? get(defaultValuesRef.current, name)\n        : defaultValue\n      : get(fieldsRef.current, name)._f.value,\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n  });\n  get(fieldsRef.current, name)._f.value = value;\n\n  React.useEffect(() => {\n    const controllerSubscription = controllerSubjectRef.current.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n\n    (ref as (instance: any) => void)({\n      target: value,\n    });\n\n    return () => controllerSubscription.unsubscribe();\n  }, [name]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref,\n    },\n    formState,\n    fieldState: Object.defineProperties(\n      {},\n      {\n        invalid: {\n          get() {\n            return !!get(formState.errors, name);\n          },\n        },\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touchedFields, name);\n          },\n        },\n        error: {\n          get() {\n            return get(formState.errors, name);\n          },\n        },\n      },\n    ),\n  };\n}\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName>,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  defaultValuesRef: React.MutableRefObject<FieldValues> = { current: {} },\n  output: Record<string, any> = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      if (current) {\n        getFieldsValues(\n          {\n            current,\n          },\n          defaultValuesRef,\n          output[name],\n        );\n      }\n    }\n  }\n\n  return {\n    ...defaultValuesRef.current,\n    ...output,\n  };\n};\n\nexport default getFieldsValues;\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id'\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): any =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: (value && value[keyName]) || generateId(),\n    ...value,\n  }));\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","export default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...(Array.isArray(value) ? value : [value])];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","export default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(Array.isArray(value) ? value : [value]),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...(Array.isArray(value) ? value : [value]), ...data];\n}\n","import compact from './compact';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (Array.isArray(index) ? index : [index]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { Field, FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isKey from '../utils/isKey';\nimport set from '../utils/set';\n\nexport default function getFields(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n) {\n  const currentFields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field | undefined;\n\n    if (field) {\n      !isKey(name)\n        ? set(currentFields, name, field._f)\n        : (currentFields[name] = field._f);\n    }\n  }\n\n  return currentFields;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { SELECT } from '../constants';\nimport { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Field } from '../types';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n): Promise<InternalFieldErrors> => {\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (\n    (!isNullOrUndefined(min) || !isNullOrUndefined(max)) &&\n    inputValue !== ''\n  ) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(inputValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (\n    value: Observer<T>,\n  ) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFields from './logic/getFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  EventType,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldName,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetFormIsDirty,\n  InternalFieldName,\n  InternalNameSet,\n  KeepStateOptions,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const fieldsNamesRef = React.useRef<Set<InternalFieldName>>(new Set());\n  const formStateSubjectRef = React.useRef(\n    new Subject<Partial<FormState<TFieldValues>>>(),\n  );\n  const watchSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      type?: EventType;\n      value?: unknown;\n    }>(),\n  );\n  const controllerSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      values: DefaultValues<TFieldValues>;\n    }>(),\n  );\n  const fieldArraySubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      fields: any;\n      isReset?: boolean;\n    }>(),\n  );\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet>(new Set());\n  const isMountedRef = React.useRef(false);\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isWatchAllRef = React.useRef(false);\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet>(new Set());\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !validationMode.isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const getIsValid = () =>\n    (formStateRef.current.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors));\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName,\n      error?: FieldError,\n      shouldRender: boolean | null = false,\n      state: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n      isWatched?: boolean,\n    ): boolean | void => {\n      const previousError = get(formStateRef.current.errors, name);\n\n      let shouldReRender =\n        shouldRender ||\n        !deepEqual(previousError, error, true) ||\n        (readFormStateRef.current.isValid &&\n          isUndefined(error) &&\n          get(fieldsWithValidationRef.current, name) &&\n          !get(validFieldsRef.current, name));\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        isWatched\n      ) {\n        const updatedFormState = {\n          ...state,\n          isValid: resolverRef.current ? !!isValid : getIsValid(),\n          errors: formStateRef.current.errors,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        formStateSubjectRef.current.next(isWatched ? {} : updatedFormState);\n      }\n\n      formStateSubjectRef.current.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const _f = get(fieldsRef.current, name, {})._f as Field['_f'];\n\n      if (_f) {\n        const value =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n            ? ''\n            : rawValue;\n        _f.value = rawValue;\n\n        if (isRadioInput(_f.ref)) {\n          (_f.refs || []).forEach(\n            (radioRef: HTMLInputElement) =>\n              (radioRef.checked = radioRef.value === value),\n          );\n        } else if (isFileInput(_f.ref) && !isString(value)) {\n          _f.ref.files = value as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (value as string[]).includes(\n                selectRef.value,\n              )),\n          );\n        } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n          _f.refs.length > 1\n            ? _f.refs.forEach(\n                (checkboxRef) =>\n                  (checkboxRef.checked = Array.isArray(value)\n                    ? !!(value as []).find(\n                        (data: string) => data === checkboxRef.value,\n                      )\n                    : value === checkboxRef.value),\n              )\n            : (_f.refs[0].checked = !!value);\n        } else {\n          _f.ref.value = value;\n        }\n\n        if (shouldRender) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, name, rawValue);\n          controllerSubjectRef.current.next({\n            values: {\n              ...defaultValuesRef.current,\n              ...values,\n            } as DefaultValues<TFieldValues>,\n            name,\n          });\n        }\n\n        options.shouldDirty && updateAndGetDirtyState(name, value);\n        options.shouldValidate && trigger(name as Path<TFieldValues>);\n      }\n    },\n    [],\n  );\n\n  const getFormIsDirty: GetFormIsDirty = React.useCallback((name, data) => {\n    if (readFormStateRef.current.isDirty) {\n      const formValues = getFieldsValues(fieldsRef);\n\n      name && data && set(formValues, name, data);\n\n      return !deepEqual(formValues, defaultValuesRef.current);\n    }\n\n    return false;\n  }, []);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        formStateRef.current.isDirty = getFormIsDirty();\n\n        const state = {\n          isDirty: formStateRef.current.isDirty,\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && formStateSubjectRef.current.next(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names: InternalFieldName[],\n      currentNames: FieldName<TFieldValues>[] = [],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef, defaultValuesRef),\n        contextRef.current,\n        {\n          criteriaMode,\n          names: currentNames,\n          fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n        },\n      );\n\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(formStateRef.current.errors, name, error)\n          : unset(formStateRef.current.errors, name);\n      }\n\n      return errors;\n    },\n    [criteriaMode],\n  );\n\n  const validateForm = async (fieldsRef: FieldRefs) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n          );\n\n          if (fieldError[_f.name]) {\n            set(formStateRef.current.errors, _f.name, fieldError[_f.name]);\n            unset(validFieldsRef.current, _f.name);\n          } else if (get(fieldsWithValidationRef.current, _f.name)) {\n            set(validFieldsRef.current, _f.name, true);\n            unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current));\n      }\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name) => {\n      const fields = isUndefined(name)\n        ? Object.keys(fieldsRef.current)\n        : Array.isArray(name)\n        ? name\n        : [name];\n      let isValid;\n\n      formStateSubjectRef.current.next({\n        isValidating: true,\n      });\n\n      if (resolverRef.current) {\n        isValid = isEmptyObject(\n          await executeSchemaOrResolverValidation(\n            fields,\n            isUndefined(name)\n              ? undefined\n              : (fields as FieldName<TFieldValues>[]),\n          ),\n        );\n      } else {\n        isUndefined(name)\n          ? await validateForm(fieldsRef.current)\n          : await Promise.all(\n              fields.map(async (data) => await executeValidation(data, null)),\n            );\n      }\n\n      formStateSubjectRef.current.next({\n        errors: formStateRef.current.errors,\n        isValidating: false,\n        isValid: resolverRef.current ? isValid : getIsValid(),\n      });\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n\n        field && !field._f\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    options?: RegisterOptions,\n    isWithinRefCallback?: boolean,\n  ) => {\n    let defaultValue;\n    const field = get(fieldsRef.current, name) as Field;\n    const useFormDefaultValue = get(defaultValuesRef.current, name);\n\n    if (\n      field &&\n      (!isEmptyObject(defaultValuesRef.current) || !isUndefined(field._f.value))\n    ) {\n      defaultValue = isUndefined(field._f.value)\n        ? useFormDefaultValue\n        : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (\n      (useFormDefaultValue || (!useFormDefaultValue && isWithinRefCallback)) &&\n      options &&\n      !validationMode.isOnSubmit &&\n      field &&\n      readFormStateRef.current.isValid\n    ) {\n      validateField(field, isValidateAllFieldCriteria).then((error) => {\n        isEmptyObject(error)\n          ? set(validFieldsRef.current, name, true)\n          : unset(validFieldsRef.current, name);\n\n        formStateRef.current.isValid &&\n          !isEmptyObject(error) &&\n          setFormState({ ...formStateRef.current, isValid: getIsValid() });\n      });\n    }\n\n    return defaultValue;\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    isMountedRef.current = true;\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n    if (isFieldArray) {\n      fieldArraySubjectRef.current.next({\n        fields: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        formStateSubjectRef.current.next({\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getFormIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    (field && !field._f) || isFieldArray\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && formStateSubjectRef.current.next({});\n    watchSubjectRef.current.next({ name, value });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        const inputValue = inputType ? getFieldValue(field) : value;\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n        const shouldSkipValidation = skipValidation({\n          isBlurEvent,\n          isTouched: !!get(formStateRef.current.touchedFields, name),\n          isSubmitted: formStateRef.current.isSubmitted,\n          isReValidateOnBlur,\n          isReValidateOnChange,\n          ...validationMode,\n        });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const state = updateAndGetDirtyState(name, field._f.value, false);\n\n        if (isBlurEvent && !get(formStateRef.current.touchedFields, name)) {\n          set(formStateRef.current.touchedFields, name, true);\n          readFormStateRef.current.touchedFields &&\n            (state.touchedFields = formStateRef.current.touchedFields);\n        }\n\n        let shouldRender = !isEmptyObject(state) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            watchSubjectRef.current.next({\n              name,\n              type,\n              value: inputValue,\n            });\n          return (\n            shouldRender &&\n            formStateSubjectRef.current.next(isWatched ? {} : state)\n          );\n        }\n\n        formStateSubjectRef.current.next({\n          isValidating: true,\n        });\n\n        if (resolverRef.current) {\n          const { errors } = await resolverRef.current(\n            getFieldsValues(fieldsRef, defaultValuesRef),\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields([name], fieldsRef.current),\n              names: [name as FieldName<TFieldValues>],\n            },\n          );\n          const previousFormIsValid = formStateRef.current.isValid;\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n\n          previousFormIsValid !== isValid && (shouldRender = true);\n        } else {\n          error = (await validateField(field, isValidateAllFieldCriteria))[\n            name\n          ];\n        }\n\n        !isBlurEvent &&\n          watchSubjectRef.current.next({\n            name,\n            type,\n            value: inputValue,\n          });\n        shouldRenderBaseOnError(\n          name,\n          error,\n          shouldRender,\n          state,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?: FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n  ) => {\n    const values = isMountedRef.current\n      ? getFieldsValues(fieldsRef, defaultValuesRef)\n      : defaultValuesRef.current;\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const previousIsValid = formStateRef.current.isValid;\n\n      if (resolver) {\n        const { errors } = await resolverRef.current!(\n          {\n            ...getFieldsValues(fieldsRef, defaultValuesRef),\n            ...values,\n          },\n          contextRef.current,\n          {\n            criteriaMode,\n            fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n          },\n        );\n        formStateRef.current.isValid = isEmptyObject(errors);\n      } else {\n        getIsValid();\n      }\n\n      previousIsValid !== formStateRef.current.isValid &&\n        formStateSubjectRef.current.next({\n          isValid: formStateRef.current.isValid,\n        });\n    },\n    [criteriaMode],\n  );\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(formStateRef.current.errors, inputName),\n      );\n\n    formStateSubjectRef.current.next({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    formStateSubjectRef.current.next({\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues = isMountedRef.current\n        ? getValues()\n        : isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : isArrayNames\n        ? defaultValue || {}\n        : { [fieldNames as string]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (isWatchAllRef.current = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of isArrayNames ? fieldNames : [fieldNames]) {\n        isGlobal && watchFieldsRef.current.add(fieldName as string);\n        result.push(get(fieldValues, fieldName as string));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | FieldPath<TFieldValues>[]\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? watchSubjectRef.current.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as string | string[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? Array.isArray(name)\n        ? name\n        : [name]\n      : Object.keys(fieldsNamesRef.current)) {\n      fieldsNamesRef.current.delete(inputName);\n      fieldArrayNamesRef.current.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        if (!options.keepIsValid) {\n          unset(fieldsWithValidationRef.current, inputName);\n          unset(validFieldsRef.current, inputName);\n        }\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !options.keepDefaultValue && unset(defaultValuesRef.current, inputName);\n\n        watchSubjectRef.current.next({\n          name: inputName,\n        });\n      }\n    }\n\n    formStateSubjectRef.current.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getFormIsDirty() }),\n      ...(resolverRef.current ? {} : { isValid: getIsValid() }),\n    });\n\n    if (!options.keepIsValid) {\n      updateIsValid();\n    }\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    let field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n      if (\n        (isRadioOrCheckbox\n          ? Array.isArray(field._f.refs) &&\n            compact(field._f.refs).find(\n              (option) => ref.value === option.value && option === ref,\n            )\n          : ref === field._f.ref) ||\n        !field ||\n        (isWeb && isHTMLElement(field._f.ref) && !isHTMLElement(ref))\n      ) {\n        return;\n      }\n\n      field = {\n        _f: isRadioOrCheckbox\n          ? {\n              ...field._f,\n              refs: [\n                ...compact(field._f.refs || []).filter(\n                  (ref) => isHTMLElement(ref) && document.contains(ref),\n                ),\n                ref,\n              ],\n              ref: { type: ref.type, name },\n            }\n          : {\n              ...field._f,\n              ref,\n            },\n      };\n\n      set(fieldsRef.current, name, field);\n\n      const defaultValue = updateValidAndValue(name, options, true);\n\n      if (\n        isRadioOrCheckbox && Array.isArray(defaultValue)\n          ? !deepEqual(get(fieldsRef.current, name)._f.value, defaultValue)\n          : isUndefined(get(fieldsRef.current, name)._f.value)\n      ) {\n        get(fieldsRef.current, name)._f.value = getFieldValue(\n          get(fieldsRef.current, name),\n        );\n      }\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options) => {\n      const isInitialRegister = !get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(isInitialRegister\n            ? { ref: { name } }\n            : {\n                ref: (get(fieldsRef.current, name)._f || {}).ref,\n                ...get(fieldsRef.current, name)._f,\n              }),\n          name,\n          ...options,\n        },\n      });\n      options && set(fieldsWithValidationRef.current, name, true);\n      fieldsNamesRef.current.add(name);\n      isInitialRegister && updateValidAndValue(name, options);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null) =>\n              ref && registerFieldRef(name, ref, options),\n          };\n    },\n    [defaultValuesRef.current],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldValues = {\n        ...defaultValuesRef.current,\n        ...getFieldsValues(fieldsRef, defaultValuesRef),\n      };\n\n      formStateSubjectRef.current.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n            },\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          formStateSubjectRef.current.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key: string) => get(formStateRef.current.errors, key),\n              fieldsNamesRef.current,\n            );\n        }\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        formStateSubjectRef.current.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria, criteriaMode],\n  );\n\n  const resetFromState = React.useCallback(\n    ({\n      keepErrors,\n      keepDirty,\n      keepIsSubmitted,\n      keepTouched,\n      keepIsValid,\n      keepSubmitCount,\n    }: KeepStateOptions) => {\n      if (!keepIsValid) {\n        validFieldsRef.current = {};\n        fieldsWithValidationRef.current = {};\n      }\n\n      watchFieldsRef.current = new Set();\n      isWatchAllRef.current = false;\n\n      formStateSubjectRef.current.next({\n        submitCount: keepSubmitCount ? formStateRef.current.submitCount : 0,\n        isDirty: keepDirty ? formStateRef.current.isDirty : false,\n        isSubmitted: keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n        isValid: keepIsValid\n          ? formStateRef.current.isValid\n          : !validationMode.isOnSubmit,\n        dirtyFields: keepDirty ? formStateRef.current.dirtyFields : {},\n        touchedFields: keepTouched ? formStateRef.current.touchedFields : {},\n        errors: keepErrors ? formStateRef.current.errors : {},\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n      });\n    },\n    [],\n  );\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      controllerSubjectRef.current.next({\n        values: { ...updatedValues },\n      });\n\n      watchSubjectRef.current.next({\n        value: { ...updatedValues },\n      });\n\n      fieldArraySubjectRef.current.next({\n        fields: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    resetFromState(keepStateOptions);\n  };\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next(formState: Partial<FormState<TFieldValues>> = {}) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          setFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(state) {\n        if (state.fields && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.fields);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    resolverRef.current && readFormStateRef.current.isValid && updateIsValid();\n\n    return () => {\n      watchSubjectRef.current.unsubscribe();\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        isWatchAllRef,\n        watchFieldsRef,\n        getFormIsDirty,\n        formStateSubjectRef,\n        fieldArraySubjectRef,\n        controllerSubjectRef,\n        watchSubjectRef,\n        watchInternal,\n        fieldsRef,\n        validFieldsRef,\n        fieldsWithValidationRef,\n        fieldArrayNamesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport mapIds from './logic/mapId';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport appendAt from './utils/append';\nimport compact from './utils/compact';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport isPrimitive from './utils/isPrimitive';\nimport isUndefined from './utils/isUndefined';\nimport moveArrayAt from './utils/move';\nimport omit from './utils/omit';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport unset from './utils/unset';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id'\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayProps<\n  TFieldValues,\n  TFieldArrayName,\n  TKeyName\n>): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const {\n    isWatchAllRef,\n    watchFieldsRef,\n    getFormIsDirty,\n    watchSubjectRef,\n    fieldArraySubjectRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    formStateSubjectRef,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n  } = control || methods.control;\n\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(\n    mapIds(\n      get(fieldArrayDefaultValuesRef.current, getFieldArrayParentName(name))\n        ? get(fieldArrayDefaultValuesRef.current, name, [])\n        : get(defaultValuesRef.current, name, []),\n      keyName,\n    ),\n  );\n\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  fieldArrayNamesRef.current.add(name);\n\n  const omitKey = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[]\n  >(\n    fields: T,\n  ) =>\n    fields.map((field) =>\n      omit((field || {}) as Record<TKeyName, any>, keyName),\n    );\n\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef, defaultValuesRef), name, []);\n\n    return mapIds<TFieldValues, TKeyName>(\n      get(fieldArrayDefaultValuesRef.current, name, []).map(\n        (item: Partial<TFieldValues>, index: number) => ({\n          ...item,\n          ...values[index],\n        }),\n      ),\n      keyName,\n    );\n  };\n\n  const getFocusDetail = (\n    index: number,\n    options?: FieldArrayMethodProps,\n  ): string =>\n    options\n      ? !isUndefined(options.focusIndex)\n        ? `${name}.${options.focusIndex}`\n        : options.focusName\n        ? options.focusName\n        : !options.shouldFocus\n        ? ''\n        : `${name}.${index}`\n      : `${name}.${index}`;\n\n  const resetFields = <T>(index?: T) =>\n    (Array.isArray(index) ? index : [index]).forEach((currentIndex) =>\n      set(\n        fieldsRef.current,\n        `${name}${isUndefined(currentIndex) ? '' : `.${currentIndex}`}`,\n        isUndefined(currentIndex) ? [] : undefined,\n      ),\n    );\n\n  const setFieldsAndNotify = (\n    fieldsValues: Partial<FieldArray<TFieldValues, TFieldArrayName>>[] = [],\n  ) => setFields(mapIds(fieldsValues, keyName));\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[]\n  >(\n    updatedFieldArrayValues?: T,\n  ) =>\n    updatedFieldArrayValues &&\n    set(\n      formStateRef.current.dirtyFields,\n      name,\n      setFieldArrayDirtyFields(\n        omitKey(updatedFieldArrayValues),\n        get(defaultValuesRef.current, name, []),\n        get(formStateRef.current.dirtyFields, name, []),\n      ),\n    );\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n    },\n    updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = [],\n    shouldSet = true,\n  ) => {\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touchedFields &&\n      get(formStateRef.current.touchedFields, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n      updateDirtyFieldsWithDefaultValues(updatedFieldArrayValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (readFormStateRef.current.isValid) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    formStateSubjectRef.current.next({\n      isDirty: getFormIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors as FieldErrors<TFieldValues>,\n      isValid: formStateRef.current.isValid,\n    });\n  };\n\n  const registerFieldArray = <T extends Object[]>(\n    values: T,\n    index = 0,\n    parentName = '',\n  ) =>\n    values.forEach(\n      (appendValueItem, valueIndex) =>\n        !isPrimitive(appendValueItem) &&\n        Object.entries(appendValueItem).forEach(([key, value]) => {\n          const inputName = `${parentName || name}.${\n            parentName ? valueIndex : index + valueIndex\n          }.${key}`;\n\n          Array.isArray(value)\n            ? registerFieldArray(value, valueIndex, inputName)\n            : set(fieldsRef.current, inputName, {\n                _f: {\n                  ref: {\n                    name: inputName,\n                  },\n                  name: inputName,\n                  value,\n                },\n              });\n        }),\n    );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = Array.isArray(value) ? value : [value];\n    const updatedFieldArrayValues = appendAt(\n      getCurrentFieldsValues(),\n      appendValue,\n    );\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n      false,\n    );\n    registerFieldArray(appendValue, currentIndex);\n\n    focusNameRef.current = getFocusDetail(currentIndex, options);\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = Array.isArray(value) ? value : [value];\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      prependValue,\n    );\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(prependValue);\n\n    focusNameRef.current = getFocusDetail(0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(getCurrentFieldsValues(), index);\n    resetFields(index);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = Array.isArray(value) ? value : [value];\n    const updatedFieldArrayValues = insertAt(\n      getCurrentFieldsValues(),\n      index,\n      insertValue,\n    );\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(insertValue, index);\n\n    focusNameRef.current = getFocusDetail(index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      fieldValues,\n      false,\n    );\n    setFieldsAndNotify(fieldValues);\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    if (isWatchAllRef.current) {\n      formStateSubjectRef.current.next({});\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (name.startsWith(watchField)) {\n          formStateSubjectRef.current.next({});\n          break;\n        }\n      }\n    }\n\n    watchSubjectRef.current.next({\n      name,\n      value: get(getFieldsValues(fieldsRef, defaultValuesRef), name, []),\n    });\n\n    focusNameRef.current &&\n      focusFieldBy(fieldsRef.current, (key: string) =>\n        key.startsWith(focusNameRef.current),\n      );\n\n    focusNameRef.current = '';\n\n    fieldArraySubjectRef.current.next({\n      name,\n      fields: omitKey([...fields]),\n    });\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const fieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next({ name: inputFieldArrayName, fields, isReset }) {\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n\n          inputFieldArrayName\n            ? set(\n                fieldArrayDefaultValuesRef.current,\n                inputFieldArrayName,\n                fields,\n              )\n            : (fieldArrayDefaultValuesRef.current = fields);\n\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      },\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n\n    return () => {\n      fieldArrayDefaultValuesRef.current = getFieldsValues(fieldsRef);\n      fieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\n\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>(props: {\n  name: TName;\n  defaultValue?: FieldPathValue<TFieldValues, TName>;\n  control?: Control<TFieldValues>;\n}): FieldPathValue<TFieldValues, TName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[]\n>(props: {\n  name: TName;\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): FieldPathValues<TFieldValues, TName>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const { control, name, defaultValue } = props || {};\n  const methods = useFormContext();\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n\n  const { watchInternal, watchSubjectRef } = control || methods.control;\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? watchInternal(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    watchInternal(name as InternalFieldName);\n\n    const watchSubscription = watchSubjectRef.current.subscribe({\n      next: ({ name: inputName, value }) =>\n        (!nameRef.current ||\n          !inputName ||\n          (Array.isArray(nameRef.current)\n            ? nameRef.current\n            : [nameRef.current]\n          ).some(\n            (fieldName) =>\n              inputName &&\n              fieldName &&\n              inputName.startsWith(fieldName as InternalFieldName),\n          )) &&\n        updateValue(\n          isString(inputName) &&\n            nameRef.current === inputName &&\n            !isUndefined(value)\n            ? value\n            : watchInternal(\n                nameRef.current as string,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n        ),\n    });\n\n    return () => watchSubscription.unsubscribe();\n  }, []);\n\n  return value;\n}\n"],"names":["element","type","value","isObjectType","isNullOrUndefined","Array","isArray","Date","name","substring","search","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","React","createContext","displayName","useFormContext","useContext","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","current","isObject","Object","keys","length","isEmptyObject","find","window","HTMLElement","document","isWeb","useFormState","props","methods","formStateRef","formStateSubjectRef","control","updateFormState","useState","readFormState","useRef","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","useEffect","formStateSubscription","subscribe","next","shouldRenderFormState","unsubscribe","getProxyFormState","useController","rules","defaultValuesRef","register","fieldsRef","fieldArrayNamesRef","controllerSubjectRef","onChange","onBlur","ref","setInputStateValue","_f","names","some","getNodeParentName","isNameInFieldArray","controllerSubscription","data","values","target","field","event","isCheckBoxInput","checked","getControllerValue","fieldState","defineProperties","invalid","isTouched","error","validateAllFieldCriteria","message","types","[object Object]","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","omit","focus","refs","getFieldsValues","output","disabled","every","d","performance","now","c","r","Math","random","toString","keyName","map","generateId","deepEqual","object1","object2","isErrorObject","isPrimitive","isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","parentNode","parentName","deepMerge","targetValue","sourceValue","slice","append","fill","insert","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","getFields","fieldsRefs","currentFields","defaultResult","validResult","options","option","attributes","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","valueAsNumber","valueAsDate","setValueAs","NaN","getFieldValueAs","isString","RegExp","getValidateError","isMessage","validationData","isRegex","async","required","maxLength","minLength","min","max","pattern","validate","inputValue","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","validateRef","isFunction","validateError","validationResult","validateFunction","entries","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","Subscription","this","tearDown","tearDowns","push","teardown","Subscriber","observer","subscription","add","closed","Subject","observers","subscriber","isWindowUndefined","render","Provider","children","focusNameRef","isWatchAllRef","watchFieldsRef","getFormIsDirty","watchSubjectRef","fieldArraySubjectRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","setFields","mapIds","getFieldArrayParentName","omitKey","getCurrentFieldsValues","getFocusDetail","focusIndex","focusName","shouldFocus","setFieldsAndNotify","fieldsValues","cleanup","batchStateUpdate","method","args","updatedFieldArrayValues","shouldSet","argA","argB","setFieldArrayDirtyFields","updateDirtyFieldsWithDefaultValues","registerFieldArray","forEach","appendValueItem","valueIndex","inputName","watchField","startsWith","fieldArraySubscription","inputFieldArrayName","isReset","swap","useCallback","fieldValues","swapArrayAt","move","moveArrayAt","prependValue","prependAt","fillEmptyArray","appendValue","appendAt","currentIndex","remove","removeArrayAt","resetFields","insertValue","insertAt","reValidateMode","resolver","context","shouldFocusError","criteriaMode","fieldsNamesRef","Set","isMountedRef","contextRef","resolverRef","validationMode","getValidationModes","isValidateAllFieldCriteria","setFormState","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","getIsValid","shouldRenderBaseOnError","shouldRender","state","isWatched","previousError","shouldReRender","updatedFormState","setFieldValue","rawValue","shouldRegister","isHTMLElement","radioRef","selectRef","includes","checkboxRef","shouldDirty","updateAndGetDirtyState","shouldValidate","trigger","formValues","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","currentNames","validateForm","fieldError","Promise","all","setInternalValues","inputKey","fieldName","isFieldWatched","has","match","updateValidAndValue","isWithinRefCallback","useFormDefaultValue","then","handleChange","inputType","isBlurEvent","isReValidateOnBlur","isReValidateOnChange","shouldSkipValidation","skipValidation","previousFormIsValid","parentNodeName","currentError","getValues","fieldNames","updateIsValid","previousIsValid","watchInternal","isGlobal","isArrayNames","registerFieldRef","isRadioOrCheckboxFunction","contains","isInitialRegister","handleSubmit","onValid","onInvalid","e","preventDefault","persist","resetFromState","keepErrors","keepDirty","keepIsSubmitted","keepTouched","keepIsValid","keepSubmitCount","useFieldArraySubscription","useMemo","watch","info","setValue","isFieldArray","reset","keepStateOptions","updatedValues","keepValues","inputRef","closest","keepDefaultValues","clearErrors","unregister","delete","keepError","keepValue","keepDefaultValue","setError","nameRef","updateValue","watchSubscription"],"mappings":"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"}